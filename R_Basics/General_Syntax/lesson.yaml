- Class: meta
  Course: R Basics
  Lesson: General Syntax
  Author: Ben De Wit
  Type: Standard
  Organization: Syntra
  Version: 2.4.3
- Class: text
  Output: 'In this lesson, we will explore some basic syntax of the R programming language.'

- Class: text
  Output: 'If at any point you would like more information on a particular topic related to R, you can type help.start() at the prompt which will open a menu of resources.'
          
- Class: text
  Output: 'Alternatively, a simple web search via Google.com often yields the answer you are looking for.'

- Class: cmd_question
  Output: 'In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and press Enter.'
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: 'Type 5 + 7 and press Enter.'

- Class: text
  Output: 'In this case R simply prints the result of 12.'
  
- Class: text
  Output: 'However, R is a programming language which is usualy used to automate some process or avoid unnecessary repetition.'

- Class: text
  Output: 'If we want to reuse our result in a second calculation, we can create a new variable that stores the result.'

- Class: text
  Output: 'The way you assign a value to a variable in R is by using the assignment operator, which looks like this: <-'
          
- Class: text
  Output: 'Think of the assignment operator as an arrow: you are assigning the value on the right hand side to the variable name on the left hand side of the arrow.'

- Class: cmd_question
  Output: 'To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7. Give it a try now.'
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: 'It is important to include a single space on each side of the assignment operator, but do NOT put a space between the `<` and the `-` that form the arrow.'

- Class: text
  Output: 'You will notice that R did not print the result of 12 this time.'
  
- Class: text
  Output: 'When using the assignment operator, R assumes that you only intend to use the result later on.'

- Class: cmd_question
  Output: 'To view the contents of the variable x, just type x and press Enter. Try it now.'
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: 'Type x and press Enter. This will automatically print the value of x.'

- Class: cmd_question
  Output: 'Now, store the result of x - 3 in a new variable called y.'
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: 'Type y <- x - 3 and press Enter. Whether you use x - 3 or x-3 is personal preference, but it is good habit to include a space on either side of the assignment operator.'

- Class: cmd_question
  Output: 'What is the value of y? Type y to find out.'
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: 'Type y and press Enter.'

- Class: text
  Output: 'Now, we will create a small collection of numbers called a vector.'

- Class: text
  Output: 'Any object that contains data is called a data structure and numeric vectors are the simplest type of data structure in R.'

- Class: text
  Output: 'The easiest way to create a vector is by using the c() function, which stands for concatenate or combine.'

- Class: cmd_question
  Output: 'Create a vector containing the numbers 1.1, 9, and 3.14, by typing c(1.1, 9, 3.14). Store the result in a variable called z.'
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: 'Inputting z <- c(1.1, 9, 3.14) will assign the vector (1.1, 9, 3.14) to a new variable called z. Including single spaces after the commas in the vector is not required, but helps make your code less cluttered and more readable.'

- Class: text
  Output: 'If you want info about a particular function in R, you can access the built-in help files via the `?` command.'

- Class: cmd_question
  Output: 'For example, if you want more information on the c() function, type ?c. Give it a try.'
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: 'Type ?c and press Enter. This will bring up the help file for the c() function.'

- Class: cmd_question
  Output: 'Type z to view its contents. Notice that there are no commas separating the values in the output.'
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: 'Type z and press Enter to view its contents.'
  
- Class: text
  Output: 'You can combine vectors to make a new vector by using the c() function.'

- Class: cmd_question
  Output: 'Create a new vector that contains z, 555, then z again in that order. Do not assign this vector to a variable, so that we can just see the result right away.'
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: 'Type c(z, 555, z). Do not create a new variable. We just want to view the result.'

- Class: cmd_question
  Output: 'Numeric vectors can be used in arithmetic expressions. Type the following to see what happens: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: 'Enter z * 2 + 100, without assigning the result to a variable. The `*` symbol is used for multiplication.'

- Class: text
  Output: 'Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2 means x squared).'
    
- Class: text
  Output: 'To take the square root, use the sqrt() function and to take the absolute value, use the abs() function.'

- Class: cmd_question
  Output: 'Take the square root of z - 1 and assign it to a new variable called my_sqrt.'
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: 'Assign the result of sqrt(z - 1) to a variable called my_sqrt.'

- Class: mult_question
  Output: 'Before we view the contents of the my_sqrt variable, what do you think it contains?'
  CorrectAnswer: a vector of length 3
  AnswerChoices: a vector of length 3; 
                 a single number (i.e a vector of length 1);
                 a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: 'Think about how R handled the other vectorized operations: element-by-element.'

- Class: cmd_question
  Output: 'Print the contents of my_sqrt.'
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: 'Just type my_sqrt and press Enter to view its value.'

- Class: text
  Output: 'As you may have guessed, first 1 is subtracted from each element of z and then the square root of each element is taken.' 
  
- Class: text
  Output: 'This leaves you with a vector of the same length as the original vector z.'

- Class: cmd_question
  Output: 'Now, create a new variable called my_div that gets the value of z divided by my_sqrt.'
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: 'Enter my_div <- z / my_sqrt. The spaces on either side of the `/` sign are not required.'

- Class: mult_question
  Output: 'Which statement do you think is true?'
  CorrectAnswer: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...;
                 my_div is a single number;
                 my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...')
  Hint: 'Think about how R handled the other vectorized operations like `+` and `*`.'

- Class: cmd_question
  Output: 'Go ahead and print the contents of my_div.'
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: 'Type my_div and press Enter to see its contents.'

- Class: text
  Output: 'Before concluding this lesson, I would like to show you a couple of time-saving tricks.'

- Class: text
  Output: 'Earlier in the lesson, you computed z * 2 + 100.'
  
- Class: text
  Output: 'Pretend that you made a mistake and you meant to add 1000 instead of 100. You could either re-type the expression, or...'

- Class: text
  Output: 'In many programming environments, the up arrow will cycle through previous commands.' 

- Class: cmd_question
  Output: 'Try hitting the up arrow on your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter.'
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: 'If your environment does not support the up arrow feature, then just type the corrected command to move on.'

- Class: text
  Output: 'Finally, let us pretend you would like to view the contents of a variable that you created earlier.'
  
- Class: text
  Output: 'But you do not remember if you named it my_div or myDiv. You could try both and see what works, or...'

- Class: text
  Output: 'You can type the first two letters of the variable name, then hit the Tab key (possibly more than once).'

- Class: text
  Output: 'Most programming environments will provide a list of variables that you have created and begin with `my`.'

- Class: text
  Output: 'This is called auto-completion and can be quite handy when you have many variables in your workspace.'
  
- Class: cmd_question
  Output: 'Give it a try: type the first two letters `my`, try auto-completion with the Tab key and press Enter'
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: 'If your programming environment does not support auto-completion, just type my_div and hit Enter to move on.'

- Class: mult_question
  Output: 'Would you like to submit the log of this lesson to Google Forms so that your instructor can evaluate your progress?'
  CorrectAnswer: NULL
  AnswerChoices: Yes;
                 No
  AnswerTests: submit_log()
  Hint: NULL
